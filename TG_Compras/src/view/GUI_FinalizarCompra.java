/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import control.Conexao;
import control.DaoCotacao;
import control.DaoMaterial;
import control.DaoMateriaisSolicitados;
import control.DaoPedCompra;
import control.DaoRequisicaoCompra;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Cotacao;
import model.Material;
import model.MateriaisSolicitados;
import model.PedidoCompra;
import model.RequisicaoCompra;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author M
 */
public class GUI_FinalizarCompra extends javax.swing.JFrame {

    /**
     * Creates new form GUI_FinalizarCompra
     */
    
    private String user = "12345678900";
    private String nome = "Jose";
    
    public GUI_FinalizarCompra() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtUsuario = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtNumeroRequisicao = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableCotacoesMaterial = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTablePedidosCompra = new javax.swing.JTable();
        btnConcluirTodosItens = new javax.swing.JButton();
        btnBuscarRequisicao = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Finalizar Compra");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Usuário");

        txtUsuario.setEnabled(false);

        jLabel2.setText("Requisição de Compra");

        jTableCotacoesMaterial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "NUMERO_SOLICITACAO", "NUMERO_COTACAO", "CODIGO_MATERIAL", "NOME_MATERIAL", "CNPJ", "SITUACAO_COTACAO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableCotacoesMaterial);

        jLabel3.setText("Tabela de Cotações do Material");

        jLabel4.setText("Tabela de Pedidos de Compra");

        jTablePedidosCompra.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "NUMERO_SOLICITACAO", "NUMERO_PEDIDO", "NUMERO_COTACAO", "SITUACAO_PEDIDO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTablePedidosCompra);

        btnConcluirTodosItens.setText("Concluir TODOS os itens relacionados a Requisicao de Compra");
        btnConcluirTodosItens.setEnabled(false);
        btnConcluirTodosItens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConcluirTodosItensActionPerformed(evt);
            }
        });

        btnBuscarRequisicao.setText("Buscar");
        btnBuscarRequisicao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarRequisicaoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(46, 46, 46)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtNumeroRequisicao, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnBuscarRequisicao))
                            .addComponent(jLabel4))
                        .addGap(0, 306, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(253, 253, 253)
                .addComponent(btnConcluirTodosItens)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtNumeroRequisicao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarRequisicao))
                .addGap(45, 45, 45)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnConcluirTodosItens)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarRequisicaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarRequisicaoActionPerformed
        requisicao = null;
        try {
            if (txtNumeroRequisicao.getText().isEmpty()) {
                throw new Exception("Id Requisicao não foi informado.\n"
                        + "Por favor informar um código de Requisicao para pesquisa.");
                
            } else {
                requisicao = daoRequisicao.consultar(Integer.parseInt(txtNumeroRequisicao.getText().trim()));

                if (requisicao == null) {
                    throw new Exception("Id Requisicao de Compra informado não existe.\n ");
                    
                } else {
                    Statement stmt;
                    ResultSet rs;

                    String sqlquery = "select NumSolicitacao as NUMERO_SOLICITACAO, NumCotacao as NUMERO_COTACAO, c.CodMaterial as CODIGO_MATERIAL, NomeMaterial as NOME_MATERIAL, CNPJ, SituacaoCotacao as SITUACAO_COTACAO "
                            + "from tbl_Cotacao c, tbl_Material m where c.CodMaterial = m.CodMaterial AND NumSolicitacao = " + txtNumeroRequisicao.getText().trim();
                    try{
                        stmt = conexao.conectar().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
                        rs = stmt.executeQuery(sqlquery);
                        jTableCotacoesMaterial.setModel(DbUtils.resultSetToTableModel(rs));
                    } catch(SQLException ex){
                        Logger.getLogger(GUI_PesquisarFornecedor.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    DefaultTableModel dm = (DefaultTableModel) jTableCotacoesMaterial.getModel();

                    sqlquery = "select NumSolicitacao as NUMERO_SOLICITACAO, NumPedido as NUMERO_PEDIDO, NumCotacao as NUMERO_COTACAO, Situacao as SITUACAO_PEDIDO "
                            + "from tbl_Pedido_Compra where NumSolicitacao = " + txtNumeroRequisicao.getText().trim();
                    try{
                        stmt = conexao.conectar().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
                        rs = stmt.executeQuery(sqlquery);
                        jTablePedidosCompra.setModel(DbUtils.resultSetToTableModel(rs));

                    } catch(SQLException ex){
                        Logger.getLogger(GUI_PesquisarFornecedor.class.getName()).log(Level.SEVERE, null, ex);
                        
                    }
                    btnConcluirTodosItens.setEnabled(true);
                    btnBuscarRequisicao.setEnabled(false);
                    txtNumeroRequisicao.setEnabled(false);
                    DefaultTableModel dmp = (DefaultTableModel) jTablePedidosCompra.getModel();
                    
                }
            }
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Falha ao pesquisar Requisicao\n\n" + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnBuscarRequisicaoActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        conexao = new Conexao("GABRIEL", "GABRIEL");
        conexao.setDriver("oracle.jdbc.driver.OracleDriver");
        conexao.setConnectionString("jdbc:oracle:thin:@localhost:1521:xe");
        daoPedido = new DaoPedCompra(conexao.conectar());
        daoMaterial = new DaoMaterial(conexao.conectar());
        daoMateriaisSolicitados = new DaoMateriaisSolicitados(conexao.conectar());
        daoCotacao = new DaoCotacao(conexao.conectar());
        daoRequisicao = new DaoRequisicaoCompra(conexao.conectar());
        txtUsuario.setText(user);
        
        
    }//GEN-LAST:event_formWindowOpened

    private void btnConcluirTodosItensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConcluirTodosItensActionPerformed
        try {
            requisicao = new RequisicaoCompra();
            requisicao = daoRequisicao.consultar(Integer.parseInt(txtNumeroRequisicao.getText()));
            int quantPed = 0;
            int quantMatSolic = 0;
            
            if (jTableCotacoesMaterial.getRowCount() == 0) {
                btnBuscarRequisicao.setEnabled(true);
                txtNumeroRequisicao.setEnabled(true);
                btnConcluirTodosItens.setEnabled(false);
                throw new Exception("Nao existe nenhuma Cotacao vinculada a essa Requisicao.");
                
            } else if (jTablePedidosCompra.getRowCount() == 0) {
                btnBuscarRequisicao.setEnabled(true);
                txtNumeroRequisicao.setEnabled(true);
                btnConcluirTodosItens.setEnabled(false);
                throw new Exception("Nao existe nenhum Pedido de compra vinculado a essa Requisicao.");
                
            } else if (requisicao.getSituacaoSolicitacao().equals("Finalizado") ) {
                btnBuscarRequisicao.setEnabled(true);
                txtNumeroRequisicao.setEnabled(true);
                btnConcluirTodosItens.setEnabled(false);
                throw new Exception("Essa requisicao ja foi finalizada.");
                
            } else {
                cotacao = new Cotacao();
                pedido = new PedidoCompra();
                
                
                int cont = 0;
                boolean verificaPedido = true;
                for(cont = 0; cont < jTablePedidosCompra.getRowCount(); cont++){
                    if( jTablePedidosCompra.getValueAt(cont , 3).equals("Aguardando Contato com Fornecedor") || jTablePedidosCompra.getValueAt(cont , 3).equals("Aguardando Aprovacao da Gerencia")){
                        verificaPedido = false;
                    }
                }
                    
                boolean comparaPedMatSolic = true;
                Statement stmtPed;
                ResultSet rsPed;
                Statement stmtMatSol;
                ResultSet rsMatSol;
                String sqlqueryPed = "select count(*) from tbl_Pedido_Compra where NumSolicitacao = " + Integer.parseInt(txtNumeroRequisicao.getText());
                String sqlqueryMatSol = "select count(*) from tbl_Material_Solicitado where NumSolicitacao = " + Integer.parseInt(txtNumeroRequisicao.getText());
                try{
                    stmtPed = conexao.conectar().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
                    rsPed = stmtPed.executeQuery(sqlqueryPed);
                    stmtMatSol = conexao.conectar().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
                    rsMatSol = stmtMatSol.executeQuery(sqlqueryMatSol);
                    if(rsPed.next() == true){
                        quantPed = rsPed.getInt(1);
                    }
                    if(rsMatSol.next() == true){
                        quantMatSolic = rsMatSol.getInt(1);
                    }
                } catch(SQLException ex){
                    Logger.getLogger(GUI_PesquisarFornecedor.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                if (quantMatSolic != quantPed){
                    comparaPedMatSolic = false;
                }
                
                if(verificaPedido == true){
                    if(comparaPedMatSolic == true){
                        for(cont = 0; cont < jTablePedidosCompra.getRowCount(); cont++){
                            pedido = daoPedido.consultar(Integer.parseInt(jTablePedidosCompra.getValueAt(cont , 1).toString()));
                            pedido.setSituacaoPedido("Finalizado");
                            daoPedido.alterar(pedido);
                        }

                        for(cont = 0; cont < jTableCotacoesMaterial.getRowCount(); cont++){
                            cotacao = daoCotacao.consultar(Integer.parseInt(jTableCotacoesMaterial.getValueAt(cont , 1).toString()));
                            cotacao.setSituacaoCotacao("Finalizado");
                            daoCotacao.alterar(cotacao);
                        }

                        requisicao.setSituacaoSolicitacao("Finalizado");
                        daoRequisicao.alterar(requisicao); 
                        JOptionPane.showMessageDialog(null, "Requisicao e itens relacionados finalizados com Sucesso");
                        btnConcluirTodosItens.setEnabled(false);
                        btnBuscarRequisicao.setEnabled(true);
                        txtNumeroRequisicao.setEnabled(true);
                        btnConcluirTodosItens.setEnabled(false);
                    } else {
                        JOptionPane.showMessageDialog(null, "Atencao, ha materiais solicitados sem pedido vinculado. Verifique"
                        + " esses materiais solicitados antes de finalizar a requisicao." , "Erro", JOptionPane.ERROR_MESSAGE);
                        btnBuscarRequisicao.setEnabled(true);
                        txtNumeroRequisicao.setEnabled(true);
                        btnConcluirTodosItens.setEnabled(false);
                    }
                    
                } else {
                    JOptionPane.showMessageDialog(null, "Atencao, ha pedidos nao processados. Verifique"
                        + " esses pedidos antes de finalizar a requisicao." , "Erro", JOptionPane.ERROR_MESSAGE);
                        btnBuscarRequisicao.setEnabled(true);
                        txtNumeroRequisicao.setEnabled(true);
                        btnConcluirTodosItens.setEnabled(false);
                }
               
            }
            atualizaTabela();
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Falha ao finalizar Requisicao\n\n" + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btnConcluirTodosItensActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI_FinalizarCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI_FinalizarCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI_FinalizarCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI_FinalizarCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI_FinalizarCompra().setVisible(true);
            }
        });
    }
    
    public void atualizaTabela() {
        Statement stmt;
                    ResultSet rs;

                    String sqlquery = "select NumSolicitacao as NUMERO_SOLICITACAO, NumCotacao as NUMERO_COTACAO, c.CodMaterial as CODIGO_MATERIAL, NomeMaterial as NOME_MATERIAL, CNPJ, SituacaoCotacao as SITUACAO_COTACAO "
                            + "from tbl_Cotacao c, tbl_Material m where c.CodMaterial = m.CodMaterial AND NumSolicitacao = " + txtNumeroRequisicao.getText().trim();
                    try{
                        stmt = conexao.conectar().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
                        rs = stmt.executeQuery(sqlquery);
                        jTableCotacoesMaterial.setModel(DbUtils.resultSetToTableModel(rs));
                    } catch(SQLException ex){
                        Logger.getLogger(GUI_PesquisarFornecedor.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    DefaultTableModel dm = (DefaultTableModel) jTableCotacoesMaterial.getModel();

                    sqlquery = "select NumSolicitacao as NUMERO_SOLICITACAO, NumPedido as NUMERO_PEDIDO, NumCotacao as NUMERO_COTACAO, Situacao as SITUACAO_PEDIDO "
                            + "from tbl_Pedido_Compra where NumSolicitacao = " + txtNumeroRequisicao.getText().trim();
                    try{
                        stmt = conexao.conectar().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
                        rs = stmt.executeQuery(sqlquery);
                        jTablePedidosCompra.setModel(DbUtils.resultSetToTableModel(rs));

                    } catch(SQLException ex){
                        Logger.getLogger(GUI_PesquisarFornecedor.class.getName()).log(Level.SEVERE, null, ex);
                        
                    }
                    
                    DefaultTableModel dmp = (DefaultTableModel) jTablePedidosCompra.getModel();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarRequisicao;
    private javax.swing.JButton btnConcluirTodosItens;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableCotacoesMaterial;
    private javax.swing.JTable jTablePedidosCompra;
    private javax.swing.JTextField txtNumeroRequisicao;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables
    private Conexao conexao = null;
    private PedidoCompra pedido;
    private DaoPedCompra daoPedido;
    private Material material;
    private DaoMaterial daoMaterial;
    private MateriaisSolicitados materiaisSolicitados;
    private DaoMateriaisSolicitados daoMateriaisSolicitados;
    private Cotacao cotacao;
    private DaoCotacao daoCotacao;
    private RequisicaoCompra requisicao;
    private DaoRequisicaoCompra daoRequisicao;
    
    public void setUser(String user) {
        this.user = user;
    }
    public void setNome(String nome) {
        this.nome = nome;
    }
}
