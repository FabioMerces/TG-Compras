/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import control.Conexao;
import control.DaoCotacao;
import control.DaoFornecedor;
import control.DaoMateriaisSolicitados;
import control.DaoMaterial;
import control.DaoRequisicaoCompra;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import model.Cotacao;
import model.Fornecedor;
import model.MateriaisSolicitados;
import model.Material;
import model.RequisicaoCompra;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Gabriel Pilan
 */
public class GUI_CotacaoVencedora extends javax.swing.JFrame {

    /**
     * Creates new form GUI_CotacaoVencedora
     */
    public GUI_CotacaoVencedora() {
        initComponents();
        jTableComparacaoFornecedores.setAutoCreateRowSorter(true);
        jTableCompararValor.setAutoCreateRowSorter(true);
        
    }
    
    public static String CotacaoVencedora;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        txtIDRequisicao = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtIDCotacao = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCompararValor = new javax.swing.JTable();
        cmbCodigoMaterial = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        chkMenorPreco = new javax.swing.JCheckBox();
        chkMaiorQualidade = new javax.swing.JCheckBox();
        chkEntregaRapida = new javax.swing.JCheckBox();
        chkPossuiGarantia = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        cmbImportanciaMenorPreco = new javax.swing.JComboBox<>();
        cmbImportanciaMaiorQualidade = new javax.swing.JComboBox<>();
        cmbImportanciaEntregaRapida = new javax.swing.JComboBox<>();
        cmbImportanciaPossuiGarantia = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableComparacaoFornecedores = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        txtFornecedorVencedor = new javax.swing.JTextField();
        btnCriarPedidodeCompra = new javax.swing.JButton();
        btnCalcularNota = new javax.swing.JButton();
        btnPesquisar = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtCotacaoVencedora = new javax.swing.JTextField();
        btnCopiarCodigo = new javax.swing.JButton();
        btnConsultarCotacoes = new javax.swing.JButton();
        btnSalvarCotacaoVencedora = new javax.swing.JButton();
        rbNotaHistorico = new javax.swing.JRadioButton();
        rbNotaPreco = new javax.swing.JRadioButton();
        btnCalcularNotaPreco = new javax.swing.JButton();

        jScrollPane3.setViewportView(jEditorPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Selecionar Cotacao Vencedora");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("ID Requisição de Compra");

        jLabel2.setText("ID Cotacao");

        txtIDCotacao.setEditable(false);
        txtIDCotacao.setBackground(new java.awt.Color(204, 204, 204));
        txtIDCotacao.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        txtIDCotacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDCotacaoActionPerformed(evt);
            }
        });

        jLabel3.setText("Nome do Material Requisitado");

        jTableCompararValor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Nome Fornecedor", "Valor Final"
            }
        ));
        jScrollPane1.setViewportView(jTableCompararValor);

        cmbCodigoMaterial.setEnabled(false);
        cmbCodigoMaterial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCodigoMaterialActionPerformed(evt);
            }
        });

        jLabel4.setText("Necessidades da Compra");

        chkMenorPreco.setText("Menor Preco");
        chkMenorPreco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMenorPrecoActionPerformed(evt);
            }
        });

        chkMaiorQualidade.setText("Maior Qualidade");
        chkMaiorQualidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMaiorQualidadeActionPerformed(evt);
            }
        });

        chkEntregaRapida.setText("Entrega Rapida");
        chkEntregaRapida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkEntregaRapidaActionPerformed(evt);
            }
        });

        chkPossuiGarantia.setText("Pós Venda");
        chkPossuiGarantia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPossuiGarantiaActionPerformed(evt);
            }
        });

        jLabel5.setText("Importância ");

        cmbImportanciaMenorPreco.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Baixa", "Intermediaria", "Alta" }));
        cmbImportanciaMenorPreco.setEnabled(false);

        cmbImportanciaMaiorQualidade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Baixa", "Intermediaria", "Alta" }));
        cmbImportanciaMaiorQualidade.setEnabled(false);

        cmbImportanciaEntregaRapida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Baixa", "Intermediaria", "Alta" }));
        cmbImportanciaEntregaRapida.setEnabled(false);

        cmbImportanciaPossuiGarantia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Baixa", "Intermediaria", "Alta" }));
        cmbImportanciaPossuiGarantia.setEnabled(false);

        jLabel6.setText("Tabela de Comparação de Fornecedores");

        jTableComparacaoFornecedores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Nome do Fornecedor"},
                {"Menor Preco"},
                {"Maior Qualidade"},
                {"Entrega Mais Rapida"},
                {"Pos Venda"},
                {"Media Total"},
                {"Media Ponderada"},
                {"Preco Unitario"},
                {"Vencedor"}
            },
            new String [] {
                "Requisito"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableComparacaoFornecedores);

        jLabel7.setText("Com base nas necessidades o melhor fornecedor para essa compra sera:");

        txtFornecedorVencedor.setEditable(false);
        txtFornecedorVencedor.setBackground(new java.awt.Color(204, 204, 204));
        txtFornecedorVencedor.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        btnCriarPedidodeCompra.setText("Criar Pedido de Compra do Material ");
        btnCriarPedidodeCompra.setEnabled(false);
        btnCriarPedidodeCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCriarPedidodeCompraActionPerformed(evt);
            }
        });

        btnCalcularNota.setText("Calcular Nota dos Fornecedores (Historico)");
        btnCalcularNota.setEnabled(false);
        btnCalcularNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularNotaActionPerformed(evt);
            }
        });

        btnPesquisar.setText("Pesquisar ");
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });

        jLabel8.setText("Codigo da Cotação Vencedora");

        txtCotacaoVencedora.setEditable(false);
        txtCotacaoVencedora.setBackground(new java.awt.Color(204, 204, 204));
        txtCotacaoVencedora.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        txtCotacaoVencedora.setEnabled(false);

        btnCopiarCodigo.setText("Copiar Codigo da Cotação vencedora");
        btnCopiarCodigo.setEnabled(false);
        btnCopiarCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopiarCodigoActionPerformed(evt);
            }
        });

        btnConsultarCotacoes.setText("Consultar Cotacoes do Material");
        btnConsultarCotacoes.setEnabled(false);
        btnConsultarCotacoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarCotacoesActionPerformed(evt);
            }
        });

        btnSalvarCotacaoVencedora.setText("Salvar Cotacao Vencedora");
        btnSalvarCotacaoVencedora.setEnabled(false);
        btnSalvarCotacaoVencedora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarCotacaoVencedoraActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbNotaHistorico);
        rbNotaHistorico.setSelected(true);
        rbNotaHistorico.setText("Calcular a Nota Baseado no Historico do Fornecedor");
        rbNotaHistorico.setEnabled(false);
        rbNotaHistorico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbNotaHistoricoActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbNotaPreco);
        rbNotaPreco.setText("Calcular a Nota Baseada somente no Preco Unitario");
        rbNotaPreco.setEnabled(false);
        rbNotaPreco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbNotaPrecoActionPerformed(evt);
            }
        });

        btnCalcularNotaPreco.setText("Calcular Nota Baseada no Preco");
        btnCalcularNotaPreco.setEnabled(false);
        btnCalcularNotaPreco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularNotaPrecoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(btnSalvarCotacaoVencedora)
                .addGap(131, 131, 131)
                .addComponent(btnCriarPedidodeCompra)
                .addGap(218, 218, 218))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addGap(18, 18, 18)
                            .addComponent(txtFornecedorVencedor, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel8)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtCotacaoVencedora, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnCopiarCodigo)
                            .addGap(46, 46, 46))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(txtIDRequisicao, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnPesquisar)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(txtIDCotacao, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(cmbCodigoMaterial, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnConsultarCotacoes))))
                    .addComponent(jLabel6)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rbNotaHistorico)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(4, 4, 4)
                                                .addComponent(jLabel4))
                                            .addComponent(chkMaiorQualidade)
                                            .addComponent(chkMenorPreco)
                                            .addComponent(chkPossuiGarantia)
                                            .addComponent(chkEntregaRapida))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(cmbImportanciaMenorPreco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(cmbImportanciaMaiorQualidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(cmbImportanciaEntregaRapida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(cmbImportanciaPossuiGarantia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(31, 31, 31)
                                                .addComponent(jLabel5)))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnCalcularNotaPreco)
                                    .addComponent(rbNotaPreco)))
                            .addComponent(btnCalcularNota))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {chkEntregaRapida, chkMaiorQualidade, chkMenorPreco, chkPossuiGarantia});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtIDRequisicao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtIDCotacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPesquisar))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbCodigoMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConsultarCotacoes))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbNotaHistorico)
                    .addComponent(rbNotaPreco))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(btnCalcularNotaPreco))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkMenorPreco, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbImportanciaMenorPreco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkMaiorQualidade, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbImportanciaMaiorQualidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkEntregaRapida, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbImportanciaEntregaRapida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkPossuiGarantia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbImportanciaPossuiGarantia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnCalcularNota)
                .addGap(23, 23, 23)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtFornecedorVencedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtCotacaoVencedora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCopiarCodigo))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCriarPedidodeCompra)
                    .addComponent(btnSalvarCotacaoVencedora)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chkMenorPrecoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMenorPrecoActionPerformed
        if (chkMenorPreco.isSelected()) {
            cmbImportanciaMenorPreco.setEnabled(true);
        } else {
            cmbImportanciaMenorPreco.setEnabled(false);
        }
    }//GEN-LAST:event_chkMenorPrecoActionPerformed

    private void chkMaiorQualidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMaiorQualidadeActionPerformed
        if (chkMaiorQualidade.isSelected()) {
            cmbImportanciaMaiorQualidade.setEnabled(true);
        } else {
            cmbImportanciaMaiorQualidade.setEnabled(false);
        }
    }//GEN-LAST:event_chkMaiorQualidadeActionPerformed

    private void chkEntregaRapidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkEntregaRapidaActionPerformed
        if (chkEntregaRapida.isSelected()) {
            cmbImportanciaEntregaRapida.setEnabled(true);
        } else {
            cmbImportanciaEntregaRapida.setEnabled(false);
        }
    }//GEN-LAST:event_chkEntregaRapidaActionPerformed

    private void chkPossuiGarantiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPossuiGarantiaActionPerformed
        if (chkPossuiGarantia.isSelected()) {
            cmbImportanciaPossuiGarantia.setEnabled(true);
        } else {
            cmbImportanciaPossuiGarantia.setEnabled(false);
        }
    }//GEN-LAST:event_chkPossuiGarantiaActionPerformed

    private void txtIDCotacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDCotacaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDCotacaoActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        txtIDRequisicao.setText(GUI_GerenciarCotacoesDeUmaRequisicao.idRequisicaoCompra);

        conexao = new Conexao("GABRIEL", "GABRIEL");
        conexao.setDriver("oracle.jdbc.driver.OracleDriver");
        conexao.setConnectionString("jdbc:oracle:thin:@localhost:1521:xe");
        daoCotacao = new DaoCotacao(conexao.conectar());
        daoRequisicao = new DaoRequisicaoCompra(conexao.conectar());
        daoMateriaisSolicitados = new DaoMateriaisSolicitados(conexao.conectar());
        daoMaterial = new DaoMaterial(conexao.conectar());
        daoFornecedor = new DaoFornecedor(conexao.conectar());
        

    }//GEN-LAST:event_formWindowOpened

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
        cmbCodigoMaterial.removeAllItems();
        requisicao = null;
        listaComboMaterial = null;
        try {
            if (txtIDRequisicao.getText().isEmpty()) {
                throw new Exception("Id Requisicao não foi informado.\n"
                        + "Por favor informar um código de Requisicao para pesquisa.");
            } else {

                requisicao = daoRequisicao.consultar(Integer.parseInt(txtIDRequisicao.getText().trim()));

                if (requisicao == null) {
                    throw new Exception("Id Requisicao de Compra informado não existe.\n ");
                } else {
                    
                    listaComboMaterial = daoMateriaisSolicitados.listarMateriaisSolicitadosDeUmaRequisicao(txtIDRequisicao.getText().trim());
                    
                    try {
                        for (int i = 0; i < listaComboMaterial.size(); i++) {                           
                            cmbCodigoMaterial.addItem(listaComboMaterial.get(i).getNomeMaterial());
                            
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, "Falha ao iniciar: xxx" + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                    
                    
                    material = listaComboMaterial.get(cmbCodigoMaterial.getSelectedIndex());
                    
                    cmbCodigoMaterial.setEnabled(true);
                    btnConsultarCotacoes.setEnabled(true);
                    
                    
                    }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Falha ao pesquisar Requisicao: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnPesquisarActionPerformed

    private void cmbCodigoMaterialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCodigoMaterialActionPerformed
        /*System.out.println("teste");
        String sqlquery;
                     
                             sqlquery = "select tbl_fornecedor.nomefornecedor, PRECOUNITARIO from tbl_cotacao " 
                            + "inner join tbl_fornecedor on tbl_fornecedor.cnpj = tbl_cotacao.cnpj "
                            +"where codmaterial = " + material.getCodMaterial()
                                     + "and numsolicitacao = " + txtIDRequisicao.getText();
                    
                    Statement stmt;
        ResultSet rs;

        try {
            stmt = conexao.conectar().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            rs = stmt.executeQuery(sqlquery);
            jTableCompararValor.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException ex) {
            Logger.getLogger(GUI_PesquisarFornecedor.class.getName()).log(Level.SEVERE, null, ex);
        }*/
    }//GEN-LAST:event_cmbCodigoMaterialActionPerformed

    private void btnConsultarCotacoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarCotacoesActionPerformed
        material = listaComboMaterial.get(cmbCodigoMaterial.getSelectedIndex());
        String sqlquery;
                     
                             sqlquery = "select tbl_fornecedor.CNPJ, tbl_fornecedor.nomefornecedor, PRECOUNITARIO from tbl_cotacao " 
                            + "inner join tbl_fornecedor on tbl_fornecedor.cnpj = tbl_cotacao.cnpj "
                            +"where codmaterial = " + material.getCodMaterial()
                                     + "and numsolicitacao = " + txtIDRequisicao.getText();
                    
                    Statement stmt;
        ResultSet rs;

        try {
            stmt = conexao.conectar().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            rs = stmt.executeQuery(sqlquery);
            jTableCompararValor.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException ex) {
            Logger.getLogger(GUI_PesquisarFornecedor.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        //ARRUMAR UMA MANEIRA DE IMPLEMENTAR UM RESET NA TABELA
//JTable table = new JTable();
       //table = jTableComparacaoFornecedores;
       DefaultTableModel model = (DefaultTableModel) jTableComparacaoFornecedores.getModel();
       
       model.setRowCount(0);
       model.setColumnCount(1);
       //jTableComparacaoFornecedores = table;
       
       rbNotaHistorico.setEnabled(true);
                    rbNotaPreco.setEnabled(true);
       
       btnCopiarCodigo.setEnabled(false);
       btnSalvarCotacaoVencedora.setEnabled(false);
       btnCriarPedidodeCompra.setEnabled(false);
    }//GEN-LAST:event_btnConsultarCotacoesActionPerformed

    private void btnCalcularNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularNotaActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTableComparacaoFornecedores.getModel();
        model.setRowCount(0);
        model.setColumnCount(1);
        model.setRowCount(9);
        jTableComparacaoFornecedores.setValueAt("Nome Fornecedor", 0, 0);
        jTableComparacaoFornecedores.setValueAt("Menor Preco", 1, 0);
        jTableComparacaoFornecedores.setValueAt("Maior Qualidade", 2, 0);
        jTableComparacaoFornecedores.setValueAt("Entrega mais rapida", 3, 0);
        jTableComparacaoFornecedores.setValueAt("Pos Venda", 4, 0);
        jTableComparacaoFornecedores.setValueAt("Media Total", 5, 0);
        jTableComparacaoFornecedores.setValueAt("Media Ponderada", 6, 0);
        jTableComparacaoFornecedores.setValueAt("Preco Unitario", 7, 0);
        jTableComparacaoFornecedores.setValueAt("Vencedor", 8, 0);
       
        
        int qntdFornecedores = jTableCompararValor.getRowCount();
        int cont=0;
        String CNPJ;       
        
        for(cont=0;cont<qntdFornecedores;cont++){
            model.addColumn("Nota Fornecedor" + (cont+1));
        }
        
        
        for(cont=0;cont<qntdFornecedores;cont++){
        
        CNPJ = jTableCompararValor.getValueAt(cont , 0).toString();
        fornecedor = daoFornecedor.consultar(CNPJ);

        jTableComparacaoFornecedores.setValueAt(fornecedor.getNomeFornecedor(), 0, cont + 1);
        jTableComparacaoFornecedores.setValueAt(fornecedor.getNotaPreco(), 1, cont + 1);
        jTableComparacaoFornecedores.setValueAt(fornecedor.getNotaQualidade(), 2, cont + 1);
        jTableComparacaoFornecedores.setValueAt(fornecedor.getNotaVelocidadeEntrega(), 3, cont + 1);
        jTableComparacaoFornecedores.setValueAt(fornecedor.getNotaPosVenda(), 4, cont + 1);
        jTableComparacaoFornecedores.setValueAt(fornecedor.calculaNotaTotal(), 5, cont + 1);
        jTableComparacaoFornecedores.setValueAt(jTableCompararValor.getValueAt(cont, 2), 7, cont + 1);
        
        
        //Implementar a Media Ponderada aqui
        if(chkEntregaRapida.isSelected() == false && chkMaiorQualidade.isSelected()==false
                && chkMenorPreco.isSelected()==false && chkPossuiGarantia.isSelected()==false){
            
        jTableComparacaoFornecedores.setValueAt(fornecedor.calculaNotaTotal(), 6, cont + 1);
        
        }else{
        int mediaPonderada=0;
        int divisor=4;
        int notaEntrega = fornecedor.getNotaVelocidadeEntrega(),
                notaQualidade = fornecedor.getNotaQualidade(),
                notaPreco = fornecedor.getNotaPreco(),
                notaGarantia = fornecedor.getNotaPosVenda();
        String importancia;
        //Baixa * 2, Intermediaria * 3, Alta * 4
        
        /*
        Precisa Arranjar uma maneira de Implementar o Calculo das Datas da Entrega Rapida!!
        */
        if(chkEntregaRapida.isSelected()){
            importancia = cmbImportanciaEntregaRapida.getSelectedItem().toString();
            if(importancia.trim().equals("Baixa")){
                divisor = divisor + 1;
                notaEntrega = (fornecedor.getNotaVelocidadeEntrega() * 2);
            }else if(importancia.trim().equals("Intermediaria")){
                divisor = divisor + 2;
                notaEntrega = (fornecedor.getNotaVelocidadeEntrega() * 3);
            }else{
                divisor = divisor + 3;
                notaEntrega = (fornecedor.getNotaVelocidadeEntrega() * 4);
            }
        }if(chkMaiorQualidade.isSelected()){
            importancia = cmbImportanciaMaiorQualidade.getSelectedItem().toString();
            if(importancia.trim().equals("Baixa")){
                divisor = divisor + 1;
                notaQualidade = (fornecedor.getNotaQualidade() * 2);
            }else if(importancia.trim().equals("Intermediaria")){
                divisor = divisor + 2;
                notaQualidade = (fornecedor.getNotaQualidade()  * 3);
            }else{
                divisor = divisor + 3;
                notaQualidade = (fornecedor.getNotaQualidade()  * 4);
            }
        }if(chkMenorPreco.isSelected()){
            importancia = cmbImportanciaMenorPreco.getSelectedItem().toString();
            if(importancia.trim().equals("Baixa")){
                divisor = divisor + 1;
                notaPreco = (fornecedor.getNotaPreco()* 2);
            }else if(importancia.trim().equals("Intermediaria")){
                divisor = divisor + 2;
                notaPreco = (fornecedor.getNotaPreco()* 3);
            }else{
                divisor = divisor + 3;
                notaPreco = (fornecedor.getNotaPreco()* 4);
            }
        }if(chkPossuiGarantia.isSelected()){
            importancia = cmbImportanciaPossuiGarantia.getSelectedItem().toString();
            if(importancia.trim().equals("Baixa")){
                divisor = divisor + 1;
                notaGarantia = (fornecedor.getNotaPosVenda() * 2);
            }else if(importancia.trim().equals("Intermediaria")){
                divisor = divisor + 2;
                notaGarantia = (fornecedor.getNotaPosVenda()  * 3);
            }else{
                divisor = divisor + 3;
                notaGarantia = (fornecedor.getNotaPosVenda()  * 4);
            }
        }
        
            
            
        
        mediaPonderada = notaEntrega + notaGarantia + notaPreco + notaQualidade;
        mediaPonderada = mediaPonderada / divisor;
        
        jTableComparacaoFornecedores.setValueAt(mediaPonderada, 6, cont + 1);
        }
        
        }
        
       int qtdeColuna = jTableComparacaoFornecedores.getColumnCount();
       for(cont=qtdeColuna;cont>qntdFornecedores+1;cont--){
       
       jTableComparacaoFornecedores.removeColumn(jTableComparacaoFornecedores.getColumn("Nota Fornecedor" + (cont-1) ));
       
       }
       boolean FornecSemNota = false;
       for(cont=0;cont<qntdFornecedores;cont++){
            if(Integer.parseInt(jTableComparacaoFornecedores.getValueAt(5, cont + 1).toString()) == 0){
                FornecSemNota = true;
            }
        }
       
       if(FornecSemNota == true){
       JOptionPane.showMessageDialog(null, "Falha existe ao menos 1 Fornecedor "
               + "que nao foi avaliado, por favor use o metodo \n"
               + "Calcular nota somente para o Preco", "Erro", JOptionPane.ERROR_MESSAGE);
                    
       }else{
       
       int MaiorNota=0;
       int ColumnFornecedorVencedor=0;
       for (cont=1;cont<=qntdFornecedores;cont++){
           
           if(Integer.parseInt(jTableComparacaoFornecedores.getValueAt(6, cont).toString()) > MaiorNota){
               MaiorNota = Integer.parseInt(jTableComparacaoFornecedores.getValueAt(6, cont).toString());
               ColumnFornecedorVencedor = cont;
           }
       
       }
       jTableComparacaoFornecedores.setValueAt("VENCEDOR!!!", 8 , ColumnFornecedorVencedor);
       
       txtFornecedorVencedor.setText(jTableComparacaoFornecedores.getValueAt(0, ColumnFornecedorVencedor).toString());
        
       //Carregar O numero da Cotacao Vencedora
        int numcotacao = 0;
       
        String sqlquery;
        String CNPJbd = null,aux;
        aux = jTableComparacaoFornecedores.getValueAt(0, ColumnFornecedorVencedor).toString();
        
        for(cont=0;cont<qntdFornecedores;cont++){
        if(aux.equals(jTableCompararValor.getValueAt(cont, 1).toString()))
            CNPJbd = jTableCompararValor.getValueAt(cont, 0).toString();        
        }
                             sqlquery = "select NUMCOTACAO from tbl_cotacao where CNPJ = " 
                                     + CNPJbd + " and PRECOUNITARIO = " + 
                                     jTableComparacaoFornecedores.getValueAt(7, ColumnFornecedorVencedor) + 
                                     "and NUMSOLICITACAO = " + txtIDRequisicao.getText().trim();
// Talvez Colocar ' ' 
                         System.out.println(sqlquery);    
                    Statement stmt;
        ResultSet rs;

        try {
            stmt = conexao.conectar().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            rs = stmt.executeQuery(sqlquery);
            if(rs.next() == true){
            numcotacao = rs.getInt("NumCotacao");
            System.out.println(numcotacao);
            }
        } catch (SQLException ex) {
            Logger.getLogger(GUI_PesquisarFornecedor.class.getName()).log(Level.SEVERE, null, ex);
        }
        
       txtCotacaoVencedora.setText(Integer.toString(numcotacao));
       CotacaoVencedora = txtCotacaoVencedora.getText();
       
       btnCopiarCodigo.setEnabled(true);
       btnSalvarCotacaoVencedora.setEnabled(true);
       btnCriarPedidodeCompra.setEnabled(true);
       }
    }//GEN-LAST:event_btnCalcularNotaActionPerformed

    private void btnCopiarCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopiarCodigoActionPerformed
        //PARA COPIAR O TEXTO SELECIONADO DA TABELA PARA O BUFFER (CLIPBOARD)
        String myString = txtCotacaoVencedora.getText();
        StringSelection stringSelection = new StringSelection(myString);
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringSelection, null);
    }//GEN-LAST:event_btnCopiarCodigoActionPerformed

    private void btnCriarPedidodeCompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCriarPedidodeCompraActionPerformed
       new GUI_GerenciarPedidoCompra().setVisible(true);
    }//GEN-LAST:event_btnCriarPedidodeCompraActionPerformed

    private void rbNotaHistoricoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbNotaHistoricoActionPerformed
        if(rbNotaHistorico.isSelected()){
        chkEntregaRapida.setEnabled(true);
        chkMaiorQualidade.setEnabled(true);
        chkMenorPreco.setEnabled(true);
        chkPossuiGarantia.setEnabled(true);
        btnCalcularNota.setEnabled(true);
        btnCalcularNotaPreco.setEnabled(false);
        }else{
            chkEntregaRapida.setEnabled(false);
            chkMaiorQualidade.setEnabled(false);
            chkMenorPreco.setEnabled(false);
            chkPossuiGarantia.setEnabled(false);
            btnCalcularNota.setEnabled(false);
        }
    }//GEN-LAST:event_rbNotaHistoricoActionPerformed

    private void rbNotaPrecoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbNotaPrecoActionPerformed
       if(rbNotaPreco.isSelected()){
           btnCalcularNotaPreco.setEnabled(true);
           chkEntregaRapida.setEnabled(false);
            chkMaiorQualidade.setEnabled(false);
            chkMenorPreco.setEnabled(false);
            chkPossuiGarantia.setEnabled(false);
            btnCalcularNota.setEnabled(false);
       }else{
        chkEntregaRapida.setEnabled(true);
        chkMaiorQualidade.setEnabled(true);
        chkMenorPreco.setEnabled(true);
        chkPossuiGarantia.setEnabled(true);
        btnCalcularNota.setEnabled(true);
        btnCalcularNotaPreco.setEnabled(false);
       }
    }//GEN-LAST:event_rbNotaPrecoActionPerformed

    private void btnCalcularNotaPrecoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularNotaPrecoActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTableComparacaoFornecedores.getModel();
        model.setRowCount(0);
        model.setColumnCount(1);
        model.setRowCount(9);
        jTableComparacaoFornecedores.setValueAt("Nome Fornecedor", 0, 0);
        jTableComparacaoFornecedores.setValueAt("Menor Preco", 1, 0);
        jTableComparacaoFornecedores.setValueAt("Maior Qualidade", 2, 0);
        jTableComparacaoFornecedores.setValueAt("Entrega mais rapida", 3, 0);
        jTableComparacaoFornecedores.setValueAt("Pos Venda", 4, 0);
        jTableComparacaoFornecedores.setValueAt("Media Total", 5, 0);
        jTableComparacaoFornecedores.setValueAt("Media Ponderada", 6, 0);
        jTableComparacaoFornecedores.setValueAt("Preco Unitario", 7, 0);
        jTableComparacaoFornecedores.setValueAt("Vencedor", 8, 0);
       
        
        int qntdFornecedores = jTableCompararValor.getRowCount();
        int cont=0;
        String CNPJ;       
        
        for(cont=0;cont<qntdFornecedores;cont++){
            model.addColumn("Nota Fornecedor" + (cont+1));
        }
        
        
        for(cont=0;cont<qntdFornecedores;cont++){
        
        CNPJ = jTableCompararValor.getValueAt(cont , 0).toString();
        fornecedor = daoFornecedor.consultar(CNPJ);
            System.out.println(CNPJ);
            System.out.println(cont);
        jTableComparacaoFornecedores.setValueAt(fornecedor.getNomeFornecedor(), 0, cont + 1);
        jTableComparacaoFornecedores.setValueAt(fornecedor.getNotaPreco(), 1, cont + 1);
        jTableComparacaoFornecedores.setValueAt(fornecedor.getNotaQualidade(), 2, cont + 1);
        jTableComparacaoFornecedores.setValueAt(fornecedor.getNotaVelocidadeEntrega(), 3, cont + 1);
        jTableComparacaoFornecedores.setValueAt(fornecedor.getNotaPosVenda(), 4, cont + 1);
        jTableComparacaoFornecedores.setValueAt(fornecedor.calculaNotaTotal(), 5, cont + 1);
        jTableComparacaoFornecedores.setValueAt(fornecedor.calculaNotaTotal(), 6, cont + 1);
        jTableComparacaoFornecedores.setValueAt(jTableCompararValor.getValueAt(cont, 2), 7, cont + 1);
        
        
        }
        
       int qtdeColuna = jTableComparacaoFornecedores.getColumnCount();
       for(cont=qtdeColuna;cont>qntdFornecedores+1;cont--){
       
       jTableComparacaoFornecedores.removeColumn(jTableComparacaoFornecedores.getColumn("Nota Fornecedor" + (cont-1) ));
       
       }
       float MenorPreco=99999999;
       int ColumnFornecedorVencedor=0;
       for (cont=1;cont<=qntdFornecedores;cont++){
           
           if(Float.parseFloat(jTableCompararValor.getValueAt(cont-1, 2).toString()) < MenorPreco){
               MenorPreco = Float.parseFloat(jTableCompararValor.getValueAt(cont-1, 2).toString());
               ColumnFornecedorVencedor = cont;
           }
       
       }
       jTableComparacaoFornecedores.setValueAt("VENCEDOR!!!", 8 , ColumnFornecedorVencedor);
       
       txtFornecedorVencedor.setText(jTableComparacaoFornecedores.getValueAt(0, ColumnFornecedorVencedor).toString());
        
       //Carregar O numero da Cotacao Vencedora
        int numcotacao = 0;
       
        String sqlquery;
        String CNPJbd = null,aux;
        aux = jTableComparacaoFornecedores.getValueAt(0, ColumnFornecedorVencedor).toString();
        
        for(cont=0;cont<qntdFornecedores;cont++){
        if(aux.equals(jTableCompararValor.getValueAt(cont, 1).toString()))
            CNPJbd = jTableCompararValor.getValueAt(cont, 0).toString();        
        }
                             sqlquery = "select NUMCOTACAO from tbl_cotacao where CNPJ = " 
                                     + CNPJbd + "and PRECOUNITARIO = " + 
                                     jTableComparacaoFornecedores.getValueAt(7, ColumnFornecedorVencedor) + 
                                     "and NUMSOLICITACAO = " + txtIDRequisicao.getText().trim();
     
                    Statement stmt;
        ResultSet rs;

        try {
            stmt = conexao.conectar().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            rs = stmt.executeQuery(sqlquery);
            if(rs.next() == true){
            numcotacao = rs.getInt("NumCotacao");
            System.out.println(numcotacao);
            }
        } catch (SQLException ex) {
            Logger.getLogger(GUI_PesquisarFornecedor.class.getName()).log(Level.SEVERE, null, ex);
        }
        
       txtCotacaoVencedora.setText(Integer.toString(numcotacao));
       CotacaoVencedora = txtCotacaoVencedora.getText();
       
       btnCopiarCodigo.setEnabled(true);
       btnSalvarCotacaoVencedora.setEnabled(true);
       btnCriarPedidodeCompra.setEnabled(true);
    }//GEN-LAST:event_btnCalcularNotaPrecoActionPerformed

    private void btnSalvarCotacaoVencedoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarCotacaoVencedoraActionPerformed
        cotacao = daoCotacao.consultar(Integer.parseInt(txtCotacaoVencedora.getText()));
        cotacao.setCotacaoVencedora("SIM");
        daoCotacao.alterar(cotacao);
        JOptionPane.showMessageDialog(null, "O Status da Cotacao Foi Alterada para Vencedora com Sucesso\n"
                + "Voce Pode veificar essa Cotacao na tela de Consulta Cotacao \n "
                + "ATENCAO!!! eh recomendado que seja feito o pedido de compra Imediatamente apos a escolha da cotacao vencedora");

        
        
    }//GEN-LAST:event_btnSalvarCotacaoVencedoraActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI_CotacaoVencedora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI_CotacaoVencedora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI_CotacaoVencedora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI_CotacaoVencedora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI_CotacaoVencedora().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalcularNota;
    private javax.swing.JButton btnCalcularNotaPreco;
    private javax.swing.JButton btnConsultarCotacoes;
    private javax.swing.JButton btnCopiarCodigo;
    private javax.swing.JButton btnCriarPedidodeCompra;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JButton btnSalvarCotacaoVencedora;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkEntregaRapida;
    private javax.swing.JCheckBox chkMaiorQualidade;
    private javax.swing.JCheckBox chkMenorPreco;
    private javax.swing.JCheckBox chkPossuiGarantia;
    private javax.swing.JComboBox<String> cmbCodigoMaterial;
    private javax.swing.JComboBox<String> cmbImportanciaEntregaRapida;
    private javax.swing.JComboBox<String> cmbImportanciaMaiorQualidade;
    private javax.swing.JComboBox<String> cmbImportanciaMenorPreco;
    private javax.swing.JComboBox<String> cmbImportanciaPossuiGarantia;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableComparacaoFornecedores;
    private javax.swing.JTable jTableCompararValor;
    private javax.swing.JRadioButton rbNotaHistorico;
    private javax.swing.JRadioButton rbNotaPreco;
    private javax.swing.JTextField txtCotacaoVencedora;
    private javax.swing.JTextField txtFornecedorVencedor;
    private javax.swing.JTextField txtIDCotacao;
    private javax.swing.JTextField txtIDRequisicao;
    // End of variables declaration//GEN-END:variables
private Conexao conexao = null;
    private Cotacao cotacao;
    private DaoCotacao daoCotacao;
    private RequisicaoCompra requisicao;
    private DaoRequisicaoCompra daoRequisicao;
    private List<Material> listaComboMaterial;
    private MateriaisSolicitados materiaisSolicitados;
    private DaoMateriaisSolicitados daoMateriaisSolicitados;
    private Material material;
    private DaoMaterial daoMaterial;
    private Fornecedor fornecedor;
    private DaoFornecedor daoFornecedor;
}
